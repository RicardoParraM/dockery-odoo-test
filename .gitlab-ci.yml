### Instructions ###
#
# 1 image: xoelabs/dockery-odoo:ci comes with some cloud tools
#   preinstalled in order to orchestrate reiew-apps and rollouts.
#   If it doesn't fir yout need, you probably know what you're doing.
#
# 2 If you use vendored modules and want to include them in testing,
#   symlink them as indicated in the comments.
#
# 3 If you use gitlab's build in registry, CI_REGISTRY_IMAGE, represents
#   that repo, as given by gitlab. You want to make sure that it's the
#   same as IMAGE in your .env file. They both refer to the same repo.
#   The reason, they are not the same variable is that Job's image: tag
#   is expanded outside of the execution scopet (before_script scope).
#
# 4 Review carfully all VARIABLES, and get familiar with Gitlab-CI variable
#   expension. Especially you want to define sensitive variables in the gitlab
#   repository directly rather than checking them in into your source code.
#
# TIPP: Jobs tagged with [image-builder] can be run on a worker
#   that is set up with docker-socket binding instead of the dind service.
#   Due to shared docker build context, this can dramatically speed up building
#   jobs. Consider running this runner on a "build bastion" server.


# Repaclace this with your custom ci image, if needed
image: xoelabs/dockery-odoo:ci
variables:
  # When using dind service we need to instruct docker, to talk with the
  # daemon started inside of the service. The daemon is available with
  # a network connection instead of the default /var/run/docker.sock socket.
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
  #
  # Note that if you're using Kubernetes executor, the variable should be set to
  # tcp://localhost:2375 because of how Kubernetes executor connects services
  # to the job container
  DOCKER_HOST: tcp://docker:2375/
  # When using dind, it's wise to use the overlayfs driver for
  # improved performance.
  DOCKER_DRIVER: overlay2
  CUSTOM_CONFIG: |
    [options]
    db_host = db
    db_port = 5432
    db_user = odoo
    db_password = odoo
services:
  - docker:dind
cache:
  untracked: true
  key: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME"
stages:
- Build
- Test
- Stage
- Release
before_script:
- ci-log-versions.sh
# Set the repo's environment
- export $(egrep -v '^#' .env | xargs)
- devopsimage="${IMAGE}:devops-${ODOO_VERSION}-${CI_PIPELINE_IID}"
- echo "${CUSTOM_CONFIG}" > .cfg-custom.ini

Build-Twins:
  stage: Build
  only: [branches]
  tags: [image-builder]
  except: ['/^HOTFIX-.*$/']
  script:
    - docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    - ci-build.sh base ${CI_PIPELINE_IID}
    - ci-build.sh devops ${CI_PIPELINE_IID}

Test-Diff:
  only: [branches]
  except: ['/^HOTFIX-.*$/']
  stage: Test
  services:
  - postgres:latest
  variables:
    # You can alternatively use an external db connection:
    # Use the CUSTOM_CONFIG variable
    POSTGRES_DB: odoo
    POSTGRES_USER: odoo
    POSTGRES_PASSWORD: ""
    # Modules configuration
    INCLUDE: YOUR_INTEGRATION_TEST_MODULE
  script:
    - |
        docker run \
            -v $(pwd)/.cfg-custom.ini:/opt/odoo/cfg.d/02-custom:ro \
            -ti "${devopsimage}" dodoo-tester \
                -i $INCLUDE

Migrate-Staged-DBs:
  only: [tags]
  stage: Stage
  variables:
    GIT_STRATEGY: none
    STAGED_DBS: "SPACE SEPARATED LIST OF EXISTING DBS TO STAGE MIGRATION"
  script:
    - |
        for db in ${STAGED_DBS}; do
            docker run \
              -v $(pwd)/.cfg-custom.ini:/opt/odoo/cfg.d/02-custom:ro \
              -ti "${devopsimage}" dodoo-migrator \
                -f ./.migration.yml \
                -d "${db}"
        done

Release:
  stage: Release
  only: [tags]
  tags: [image-builder]
  allow_failure: false
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - ci-build.sh base "${CI_COMMIT_TAG}"
    - ci-build.sh devops "${CI_COMMIT_TAG}"
  environment: production

# CI GIT & Component Configuration
variables:
  GIT_DEPTH: '50'
  GIT_STRATEGY: fetch
  GIT_SUBMODULE_STRATEGY: 'recursive'
  GIT_SSL_NO_VERIFY: "true"
